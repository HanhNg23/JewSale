/**
 * Jewelry APIs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.JewelryApis);
  }
}(this, function(expect, JewelryApis) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new JewelryApis.MetalPriceRate();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MetalPriceRate', function() {
    it('should create an instance of MetalPriceRate', function() {
      // uncomment below and update the code to test MetalPriceRate
      //var instance = new JewelryApis.MetalPriceRate();
      //expect(instance).to.be.a(JewelryApis.MetalPriceRate);
    });

    it('should have the property metalPriceRateId (base name: "metalPriceRateId")', function() {
      // uncomment below and update the code to test the property metalPriceRateId
      //var instance = new JewelryApis.MetalPriceRate();
      //expect(instance).to.be();
    });

    it('should have the property metalTypeId (base name: "metalTypeId")', function() {
      // uncomment below and update the code to test the property metalTypeId
      //var instance = new JewelryApis.MetalPriceRate();
      //expect(instance).to.be();
    });

    it('should have the property profitSell (base name: "profitSell")', function() {
      // uncomment below and update the code to test the property profitSell
      //var instance = new JewelryApis.MetalPriceRate();
      //expect(instance).to.be();
    });

    it('should have the property profitBuy (base name: "profitBuy")', function() {
      // uncomment below and update the code to test the property profitBuy
      //var instance = new JewelryApis.MetalPriceRate();
      //expect(instance).to.be();
    });

    it('should have the property exchangeRate (base name: "exchangeRate")', function() {
      // uncomment below and update the code to test the property exchangeRate
      //var instance = new JewelryApis.MetalPriceRate();
      //expect(instance).to.be();
    });

    it('should have the property internationalPrice (base name: "internationalPrice")', function() {
      // uncomment below and update the code to test the property internationalPrice
      //var instance = new JewelryApis.MetalPriceRate();
      //expect(instance).to.be();
    });

    it('should have the property metalPriceSpot (base name: "metalPriceSpot")', function() {
      // uncomment below and update the code to test the property metalPriceSpot
      //var instance = new JewelryApis.MetalPriceRate();
      //expect(instance).to.be();
    });

    it('should have the property sellingPrice (base name: "sellingPrice")', function() {
      // uncomment below and update the code to test the property sellingPrice
      //var instance = new JewelryApis.MetalPriceRate();
      //expect(instance).to.be();
    });

    it('should have the property buyingPrice (base name: "buyingPrice")', function() {
      // uncomment below and update the code to test the property buyingPrice
      //var instance = new JewelryApis.MetalPriceRate();
      //expect(instance).to.be();
    });

    it('should have the property effectiveDate (base name: "effectiveDate")', function() {
      // uncomment below and update the code to test the property effectiveDate
      //var instance = new JewelryApis.MetalPriceRate();
      //expect(instance).to.be();
    });

  });

}));
