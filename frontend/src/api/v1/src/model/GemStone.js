/**
 * Jewelry APIs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GemStone model module.
 * @module model/GemStone
 * @version 1.0.0
 */
class GemStone {
    /**
     * Constructs a new <code>GemStone</code>.
     * @alias module:model/GemStone
     */
    constructor() { 
        
        GemStone.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GemStone</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GemStone} obj Optional instance to populate.
     * @return {module:model/GemStone} The populated <code>GemStone</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GemStone();

            if (data.hasOwnProperty('gemstoneId')) {
                obj['gemstoneId'] = ApiClient.convertToType(data['gemstoneId'], 'Number');
            }
            if (data.hasOwnProperty('gemstoneName')) {
                obj['gemstoneName'] = ApiClient.convertToType(data['gemstoneName'], 'String');
            }
            if (data.hasOwnProperty('stoneColor')) {
                obj['stoneColor'] = ApiClient.convertToType(data['stoneColor'], 'String');
            }
            if (data.hasOwnProperty('stoneCut')) {
                obj['stoneCut'] = ApiClient.convertToType(data['stoneCut'], 'String');
            }
            if (data.hasOwnProperty('stoneClarity')) {
                obj['stoneClarity'] = ApiClient.convertToType(data['stoneClarity'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GemStone</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GemStone</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['gemstoneName'] && !(typeof data['gemstoneName'] === 'string' || data['gemstoneName'] instanceof String)) {
            throw new Error("Expected the field `gemstoneName` to be a primitive type in the JSON string but got " + data['gemstoneName']);
        }
        // ensure the json data is a string
        if (data['stoneColor'] && !(typeof data['stoneColor'] === 'string' || data['stoneColor'] instanceof String)) {
            throw new Error("Expected the field `stoneColor` to be a primitive type in the JSON string but got " + data['stoneColor']);
        }
        // ensure the json data is a string
        if (data['stoneCut'] && !(typeof data['stoneCut'] === 'string' || data['stoneCut'] instanceof String)) {
            throw new Error("Expected the field `stoneCut` to be a primitive type in the JSON string but got " + data['stoneCut']);
        }
        // ensure the json data is a string
        if (data['stoneClarity'] && !(typeof data['stoneClarity'] === 'string' || data['stoneClarity'] instanceof String)) {
            throw new Error("Expected the field `stoneClarity` to be a primitive type in the JSON string but got " + data['stoneClarity']);
        }

        return true;
    }


}



/**
 * @member {Number} gemstoneId
 */
GemStone.prototype['gemstoneId'] = undefined;

/**
 * @member {String} gemstoneName
 */
GemStone.prototype['gemstoneName'] = undefined;

/**
 * @member {String} stoneColor
 */
GemStone.prototype['stoneColor'] = undefined;

/**
 * @member {String} stoneCut
 */
GemStone.prototype['stoneCut'] = undefined;

/**
 * @member {String} stoneClarity
 */
GemStone.prototype['stoneClarity'] = undefined;






export default GemStone;

