/**
 * Jewelry APIs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProductPriceDto from './ProductPriceDto';

/**
 * The ProductRequestUpdate model module.
 * @module model/ProductRequestUpdate
 * @version 1.0.0
 */
class ProductRequestUpdate {
    /**
     * Constructs a new <code>ProductRequestUpdate</code>.
     * @alias module:model/ProductRequestUpdate
     * @param productId {Number} 
     * @param productName {String} 
     * @param productType {String} 
     * @param unitMeasure {String} 
     * @param saleStatus {String} 
     * @param productPrice {module:model/ProductPriceDto} 
     */
    constructor(productId, productName, productType, unitMeasure, saleStatus, productPrice) { 
        
        ProductRequestUpdate.initialize(this, productId, productName, productType, unitMeasure, saleStatus, productPrice);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, productId, productName, productType, unitMeasure, saleStatus, productPrice) { 
        obj['productId'] = productId;
        obj['productName'] = productName;
        obj['productType'] = productType;
        obj['unitMeasure'] = unitMeasure;
        obj['saleStatus'] = saleStatus;
        obj['productPrice'] = productPrice;
    }

    /**
     * Constructs a <code>ProductRequestUpdate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductRequestUpdate} obj Optional instance to populate.
     * @return {module:model/ProductRequestUpdate} The populated <code>ProductRequestUpdate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductRequestUpdate();

            if (data.hasOwnProperty('productId')) {
                obj['productId'] = ApiClient.convertToType(data['productId'], 'Number');
            }
            if (data.hasOwnProperty('productName')) {
                obj['productName'] = ApiClient.convertToType(data['productName'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('productType')) {
                obj['productType'] = ApiClient.convertToType(data['productType'], 'String');
            }
            if (data.hasOwnProperty('unitMeasure')) {
                obj['unitMeasure'] = ApiClient.convertToType(data['unitMeasure'], 'String');
            }
            if (data.hasOwnProperty('saleStatus')) {
                obj['saleStatus'] = ApiClient.convertToType(data['saleStatus'], 'String');
            }
            if (data.hasOwnProperty('imageUrls')) {
                obj['imageUrls'] = ApiClient.convertToType(data['imageUrls'], ['String']);
            }
            if (data.hasOwnProperty('productPrice')) {
                obj['productPrice'] = ProductPriceDto.constructFromObject(data['productPrice']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductRequestUpdate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductRequestUpdate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ProductRequestUpdate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['productName'] && !(typeof data['productName'] === 'string' || data['productName'] instanceof String)) {
            throw new Error("Expected the field `productName` to be a primitive type in the JSON string but got " + data['productName']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['productType'] && !(typeof data['productType'] === 'string' || data['productType'] instanceof String)) {
            throw new Error("Expected the field `productType` to be a primitive type in the JSON string but got " + data['productType']);
        }
        // ensure the json data is a string
        if (data['unitMeasure'] && !(typeof data['unitMeasure'] === 'string' || data['unitMeasure'] instanceof String)) {
            throw new Error("Expected the field `unitMeasure` to be a primitive type in the JSON string but got " + data['unitMeasure']);
        }
        // ensure the json data is a string
        if (data['saleStatus'] && !(typeof data['saleStatus'] === 'string' || data['saleStatus'] instanceof String)) {
            throw new Error("Expected the field `saleStatus` to be a primitive type in the JSON string but got " + data['saleStatus']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['imageUrls'])) {
            throw new Error("Expected the field `imageUrls` to be an array in the JSON data but got " + data['imageUrls']);
        }
        // validate the optional field `productPrice`
        if (data['productPrice']) { // data not null
          ProductPriceDto.validateJSON(data['productPrice']);
        }

        return true;
    }


}

ProductRequestUpdate.RequiredProperties = ["productId", "productName", "productType", "unitMeasure", "saleStatus", "productPrice"];

/**
 * @member {Number} productId
 */
ProductRequestUpdate.prototype['productId'] = undefined;

/**
 * @member {String} productName
 */
ProductRequestUpdate.prototype['productName'] = undefined;

/**
 * @member {String} description
 */
ProductRequestUpdate.prototype['description'] = undefined;

/**
 * @member {String} productType
 */
ProductRequestUpdate.prototype['productType'] = undefined;

/**
 * @member {String} unitMeasure
 */
ProductRequestUpdate.prototype['unitMeasure'] = undefined;

/**
 * @member {String} saleStatus
 */
ProductRequestUpdate.prototype['saleStatus'] = undefined;

/**
 * @member {Array.<String>} imageUrls
 */
ProductRequestUpdate.prototype['imageUrls'] = undefined;

/**
 * @member {module:model/ProductPriceDto} productPrice
 */
ProductRequestUpdate.prototype['productPrice'] = undefined;






export default ProductRequestUpdate;

