/**
 * Jewelry APIs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InvoiceItemPayload from './InvoiceItemPayload';

/**
 * The CreateInvoiceSellPayload model module.
 * @module model/CreateInvoiceSellPayload
 * @version 1.0.0
 */
class CreateInvoiceSellPayload {
    /**
     * Constructs a new <code>CreateInvoiceSellPayload</code>.
     * @alias module:model/CreateInvoiceSellPayload
     * @param transactionType {module:model/CreateInvoiceSellPayload.TransactionTypeEnum} Type of the transaction: bán ra, mua vào
     * @param invoiceItems {Array.<module:model/InvoiceItemPayload>} List of items in the invoice
     * @param paymentMethod {module:model/CreateInvoiceSellPayload.PaymentMethodEnum} Method of payment
     */
    constructor(transactionType, invoiceItems, paymentMethod) { 
        
        CreateInvoiceSellPayload.initialize(this, transactionType, invoiceItems, paymentMethod);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, transactionType, invoiceItems, paymentMethod) { 
        obj['transactionType'] = transactionType;
        obj['invoiceItems'] = invoiceItems;
        obj['paymentMethod'] = paymentMethod;
    }

    /**
     * Constructs a <code>CreateInvoiceSellPayload</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateInvoiceSellPayload} obj Optional instance to populate.
     * @return {module:model/CreateInvoiceSellPayload} The populated <code>CreateInvoiceSellPayload</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateInvoiceSellPayload();

            if (data.hasOwnProperty('transactionType')) {
                obj['transactionType'] = ApiClient.convertToType(data['transactionType'], 'String');
            }
            if (data.hasOwnProperty('customerName')) {
                obj['customerName'] = ApiClient.convertToType(data['customerName'], 'String');
            }
            if (data.hasOwnProperty('customerPhone')) {
                obj['customerPhone'] = ApiClient.convertToType(data['customerPhone'], 'String');
            }
            if (data.hasOwnProperty('invoiceItems')) {
                obj['invoiceItems'] = ApiClient.convertToType(data['invoiceItems'], [InvoiceItemPayload]);
            }
            if (data.hasOwnProperty('paymentMethod')) {
                obj['paymentMethod'] = ApiClient.convertToType(data['paymentMethod'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateInvoiceSellPayload</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateInvoiceSellPayload</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateInvoiceSellPayload.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['transactionType'] && !(typeof data['transactionType'] === 'string' || data['transactionType'] instanceof String)) {
            throw new Error("Expected the field `transactionType` to be a primitive type in the JSON string but got " + data['transactionType']);
        }
        // ensure the json data is a string
        if (data['customerName'] && !(typeof data['customerName'] === 'string' || data['customerName'] instanceof String)) {
            throw new Error("Expected the field `customerName` to be a primitive type in the JSON string but got " + data['customerName']);
        }
        // ensure the json data is a string
        if (data['customerPhone'] && !(typeof data['customerPhone'] === 'string' || data['customerPhone'] instanceof String)) {
            throw new Error("Expected the field `customerPhone` to be a primitive type in the JSON string but got " + data['customerPhone']);
        }
        if (data['invoiceItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['invoiceItems'])) {
                throw new Error("Expected the field `invoiceItems` to be an array in the JSON data but got " + data['invoiceItems']);
            }
            // validate the optional field `invoiceItems` (array)
            for (const item of data['invoiceItems']) {
                InvoiceItemPayload.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['paymentMethod'] && !(typeof data['paymentMethod'] === 'string' || data['paymentMethod'] instanceof String)) {
            throw new Error("Expected the field `paymentMethod` to be a primitive type in the JSON string but got " + data['paymentMethod']);
        }

        return true;
    }


}

CreateInvoiceSellPayload.RequiredProperties = ["transactionType", "invoiceItems", "paymentMethod"];

/**
 * Type of the transaction: bán ra, mua vào
 * @member {module:model/CreateInvoiceSellPayload.TransactionTypeEnum} transactionType
 */
CreateInvoiceSellPayload.prototype['transactionType'] = undefined;

/**
 * @member {String} customerName
 */
CreateInvoiceSellPayload.prototype['customerName'] = undefined;

/**
 * @member {String} customerPhone
 */
CreateInvoiceSellPayload.prototype['customerPhone'] = undefined;

/**
 * List of items in the invoice
 * @member {Array.<module:model/InvoiceItemPayload>} invoiceItems
 */
CreateInvoiceSellPayload.prototype['invoiceItems'] = undefined;

/**
 * Method of payment
 * @member {module:model/CreateInvoiceSellPayload.PaymentMethodEnum} paymentMethod
 */
CreateInvoiceSellPayload.prototype['paymentMethod'] = undefined;





/**
 * Allowed values for the <code>transactionType</code> property.
 * @enum {String}
 * @readonly
 */
CreateInvoiceSellPayload['TransactionTypeEnum'] = {

    /**
     * value: "SELL"
     * @const
     */
    "SELL": "SELL",

    /**
     * value: "PURCHASE"
     * @const
     */
    "PURCHASE": "PURCHASE"
};


/**
 * Allowed values for the <code>paymentMethod</code> property.
 * @enum {String}
 * @readonly
 */
CreateInvoiceSellPayload['PaymentMethodEnum'] = {

    /**
     * value: "CASH"
     * @const
     */
    "CASH": "CASH",

    /**
     * value: "EWALLET_VNPAY"
     * @const
     */
    "EWALLET_VNPAY": "EWALLET_VNPAY"
};



export default CreateInvoiceSellPayload;

