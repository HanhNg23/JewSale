/**
 * Jewelry APIs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Account from './Account';
import InvoiceItem from './InvoiceItem';

/**
 * The Invoice model module.
 * @module model/Invoice
 * @version 1.0.0
 */
class Invoice {
    /**
     * Constructs a new <code>Invoice</code>.
     * @alias module:model/Invoice
     */
    constructor() { 
        
        Invoice.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Invoice</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Invoice} obj Optional instance to populate.
     * @return {module:model/Invoice} The populated <code>Invoice</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Invoice();

            if (data.hasOwnProperty('invoiceId')) {
                obj['invoiceId'] = ApiClient.convertToType(data['invoiceId'], 'Number');
            }
            if (data.hasOwnProperty('transactionDate')) {
                obj['transactionDate'] = ApiClient.convertToType(data['transactionDate'], 'Date');
            }
            if (data.hasOwnProperty('transactionType')) {
                obj['transactionType'] = ApiClient.convertToType(data['transactionType'], 'String');
            }
            if (data.hasOwnProperty('customerName')) {
                obj['customerName'] = ApiClient.convertToType(data['customerName'], 'String');
            }
            if (data.hasOwnProperty('customerPhone')) {
                obj['customerPhone'] = ApiClient.convertToType(data['customerPhone'], 'String');
            }
            if (data.hasOwnProperty('transactionClerk')) {
                obj['transactionClerk'] = Account.constructFromObject(data['transactionClerk']);
            }
            if (data.hasOwnProperty('transactionClerkId')) {
                obj['transactionClerkId'] = ApiClient.convertToType(data['transactionClerkId'], 'Number');
            }
            if (data.hasOwnProperty('totalAmount')) {
                obj['totalAmount'] = ApiClient.convertToType(data['totalAmount'], 'Number');
            }
            if (data.hasOwnProperty('taxPercent')) {
                obj['taxPercent'] = ApiClient.convertToType(data['taxPercent'], 'Number');
            }
            if (data.hasOwnProperty('totalDiscount')) {
                obj['totalDiscount'] = ApiClient.convertToType(data['totalDiscount'], 'Number');
            }
            if (data.hasOwnProperty('totalVoucherDiscount')) {
                obj['totalVoucherDiscount'] = ApiClient.convertToType(data['totalVoucherDiscount'], 'Number');
            }
            if (data.hasOwnProperty('netAmount')) {
                obj['netAmount'] = ApiClient.convertToType(data['netAmount'], 'Number');
            }
            if (data.hasOwnProperty('paymentDetailsId')) {
                obj['paymentDetailsId'] = ApiClient.convertToType(data['paymentDetailsId'], 'Number');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('invoiceItems')) {
                obj['invoiceItems'] = ApiClient.convertToType(data['invoiceItems'], [InvoiceItem]);
            }
            if (data.hasOwnProperty('paymentMethod')) {
                obj['paymentMethod'] = ApiClient.convertToType(data['paymentMethod'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Invoice</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Invoice</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['transactionType'] && !(typeof data['transactionType'] === 'string' || data['transactionType'] instanceof String)) {
            throw new Error("Expected the field `transactionType` to be a primitive type in the JSON string but got " + data['transactionType']);
        }
        // ensure the json data is a string
        if (data['customerName'] && !(typeof data['customerName'] === 'string' || data['customerName'] instanceof String)) {
            throw new Error("Expected the field `customerName` to be a primitive type in the JSON string but got " + data['customerName']);
        }
        // ensure the json data is a string
        if (data['customerPhone'] && !(typeof data['customerPhone'] === 'string' || data['customerPhone'] instanceof String)) {
            throw new Error("Expected the field `customerPhone` to be a primitive type in the JSON string but got " + data['customerPhone']);
        }
        // validate the optional field `transactionClerk`
        if (data['transactionClerk']) { // data not null
          Account.validateJSON(data['transactionClerk']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        if (data['invoiceItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['invoiceItems'])) {
                throw new Error("Expected the field `invoiceItems` to be an array in the JSON data but got " + data['invoiceItems']);
            }
            // validate the optional field `invoiceItems` (array)
            for (const item of data['invoiceItems']) {
                InvoiceItem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['paymentMethod'] && !(typeof data['paymentMethod'] === 'string' || data['paymentMethod'] instanceof String)) {
            throw new Error("Expected the field `paymentMethod` to be a primitive type in the JSON string but got " + data['paymentMethod']);
        }

        return true;
    }


}



/**
 * @member {Number} invoiceId
 */
Invoice.prototype['invoiceId'] = undefined;

/**
 * @member {Date} transactionDate
 */
Invoice.prototype['transactionDate'] = undefined;

/**
 * @member {module:model/Invoice.TransactionTypeEnum} transactionType
 */
Invoice.prototype['transactionType'] = undefined;

/**
 * @member {String} customerName
 */
Invoice.prototype['customerName'] = undefined;

/**
 * @member {String} customerPhone
 */
Invoice.prototype['customerPhone'] = undefined;

/**
 * @member {module:model/Account} transactionClerk
 */
Invoice.prototype['transactionClerk'] = undefined;

/**
 * @member {Number} transactionClerkId
 */
Invoice.prototype['transactionClerkId'] = undefined;

/**
 * @member {Number} totalAmount
 */
Invoice.prototype['totalAmount'] = undefined;

/**
 * @member {Number} taxPercent
 */
Invoice.prototype['taxPercent'] = undefined;

/**
 * @member {Number} totalDiscount
 */
Invoice.prototype['totalDiscount'] = undefined;

/**
 * @member {Number} totalVoucherDiscount
 */
Invoice.prototype['totalVoucherDiscount'] = undefined;

/**
 * @member {Number} netAmount
 */
Invoice.prototype['netAmount'] = undefined;

/**
 * @member {Number} paymentDetailsId
 */
Invoice.prototype['paymentDetailsId'] = undefined;

/**
 * @member {Date} updatedAt
 */
Invoice.prototype['updatedAt'] = undefined;

/**
 * @member {module:model/Invoice.StatusEnum} status
 */
Invoice.prototype['status'] = undefined;

/**
 * @member {Array.<module:model/InvoiceItem>} invoiceItems
 */
Invoice.prototype['invoiceItems'] = undefined;

/**
 * @member {module:model/Invoice.PaymentMethodEnum} paymentMethod
 */
Invoice.prototype['paymentMethod'] = undefined;





/**
 * Allowed values for the <code>transactionType</code> property.
 * @enum {String}
 * @readonly
 */
Invoice['TransactionTypeEnum'] = {

    /**
     * value: "SELL"
     * @const
     */
    "SELL": "SELL",

    /**
     * value: "PURCHASE"
     * @const
     */
    "PURCHASE": "PURCHASE"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Invoice['StatusEnum'] = {

    /**
     * value: "PENDING_PAYMENT"
     * @const
     */
    "PENDING_PAYMENT": "PENDING_PAYMENT",

    /**
     * value: "PAID"
     * @const
     */
    "PAID": "PAID",

    /**
     * value: "CANCELLED"
     * @const
     */
    "CANCELLED": "CANCELLED"
};


/**
 * Allowed values for the <code>paymentMethod</code> property.
 * @enum {String}
 * @readonly
 */
Invoice['PaymentMethodEnum'] = {

    /**
     * value: "CASH"
     * @const
     */
    "CASH": "CASH",

    /**
     * value: "EWALLET_VNPAY"
     * @const
     */
    "EWALLET_VNPAY": "EWALLET_VNPAY"
};



export default Invoice;

