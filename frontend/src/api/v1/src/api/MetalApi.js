/**
 * Jewelry APIs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GoldPriceRateDto from '../model/GoldPriceRateDto';
import MetaUpdateRequest from '../model/MetaUpdateRequest';
import MetalCreateRequest from '../model/MetalCreateRequest';
import MetalType from '../model/MetalType';
import SilverPriceRateDto from '../model/SilverPriceRateDto';

/**
* Metal service.
* @module api/MetalApi
* @version 1.0.0
*/
export default class MetalApi {

    /**
    * Constructs a new MetalApi. 
    * @alias module:api/MetalApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteMetal operation.
     * @callback module:api/MetalApi~deleteMetalCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} metalTypeId 
     * @param {module:api/MetalApi~deleteMetalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteMetal(metalTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'metalTypeId' is set
      if (metalTypeId === undefined || metalTypeId === null) {
        throw new Error("Missing the required parameter 'metalTypeId' when calling deleteMetal");
      }

      let pathParams = {
        'metal-type-id': metalTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/metals/{metal-type-id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllMetalTypes operation.
     * @callback module:api/MetalApi~getAllMetalTypesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/MetalApi~getAllMetalTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getAllMetalTypes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/metals/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllMetalTypesOnMonitor operation.
     * @callback module:api/MetalApi~getAllMetalTypesOnMonitorCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/MetalApi~getAllMetalTypesOnMonitorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getAllMetalTypesOnMonitor(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/metals/all/on-monitor', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMetalGoldPriceRate operation.
     * @callback module:api/MetalApi~getMetalGoldPriceRateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoldPriceRateDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/MetalApi~getMetalGoldPriceRateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoldPriceRateDto}
     */
    getMetalGoldPriceRate(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GoldPriceRateDto;
      return this.apiClient.callApi(
        '/metals/gold-price-rate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMetalSilverPriceRate operation.
     * @callback module:api/MetalApi~getMetalSilverPriceRateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SilverPriceRateDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/MetalApi~getMetalSilverPriceRateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SilverPriceRateDto}
     */
    getMetalSilverPriceRate(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = SilverPriceRateDto;
      return this.apiClient.callApi(
        '/metals/silver-price-rate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMetalTypeInDetails operation.
     * @callback module:api/MetalApi~getMetalTypeInDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetalType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} metalTypeName 
     * @param {module:api/MetalApi~getMetalTypeInDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetalType}
     */
    getMetalTypeInDetails(metalTypeName, callback) {
      let postBody = null;
      // verify the required parameter 'metalTypeName' is set
      if (metalTypeName === undefined || metalTypeName === null) {
        throw new Error("Missing the required parameter 'metalTypeName' when calling getMetalTypeInDetails");
      }

      let pathParams = {
        'metal-type-name': metalTypeName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = MetalType;
      return this.apiClient.callApi(
        '/metals/{metal-type-name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the insertNewMetal operation.
     * @callback module:api/MetalApi~insertNewMetalCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/MetalCreateRequest} metalCreateRequest 
     * @param {module:api/MetalApi~insertNewMetalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    insertNewMetal(metalCreateRequest, callback) {
      let postBody = metalCreateRequest;
      // verify the required parameter 'metalCreateRequest' is set
      if (metalCreateRequest === undefined || metalCreateRequest === null) {
        throw new Error("Missing the required parameter 'metalCreateRequest' when calling insertNewMetal");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/metals/metal', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMetal operation.
     * @callback module:api/MetalApi~updateMetalCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} metalTypeId 
     * @param {module:model/MetaUpdateRequest} metaUpdateRequest 
     * @param {module:api/MetalApi~updateMetalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateMetal(metalTypeId, metaUpdateRequest, callback) {
      let postBody = metaUpdateRequest;
      // verify the required parameter 'metalTypeId' is set
      if (metalTypeId === undefined || metalTypeId === null) {
        throw new Error("Missing the required parameter 'metalTypeId' when calling updateMetal");
      }
      // verify the required parameter 'metaUpdateRequest' is set
      if (metaUpdateRequest === undefined || metaUpdateRequest === null) {
        throw new Error("Missing the required parameter 'metaUpdateRequest' when calling updateMetal");
      }

      let pathParams = {
        'metal-type-id': metalTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/metals/{metal-type-id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
