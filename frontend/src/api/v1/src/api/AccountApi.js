/**
 * Jewelry APIs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InputValues from '../model/InputValues';
import OutputValues from '../model/OutputValues';

/**
* Account service.
* @module api/AccountApi
* @version 1.0.0
*/
export default class AccountApi {

    /**
    * Constructs a new AccountApi. 
    * @alias module:api/AccountApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createAccount operation.
     * @callback module:api/AccountApi~createAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputValues} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/InputValues} inputValues 
     * @param {module:api/AccountApi~createAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputValues}
     */
    createAccount(inputValues, callback) {
      let postBody = inputValues;
      // verify the required parameter 'inputValues' is set
      if (inputValues === undefined || inputValues === null) {
        throw new Error("Missing the required parameter 'inputValues' when calling createAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = OutputValues;
      return this.apiClient.callApi(
        '/accounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAccount operation.
     * @callback module:api/AccountApi~deleteAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputValues} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/AccountApi~deleteAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputValues}
     */
    deleteAccount(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteAccount");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = OutputValues;
      return this.apiClient.callApi(
        '/accounts/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchUser operation.
     * @callback module:api/AccountApi~searchUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputValues} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [username] 
     * @param {Number} [accountId] 
     * @param {String} [sortBy] 
     * @param {module:model/String} [sortOrder] 
     * @param {module:api/AccountApi~searchUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputValues}
     */
    searchUser(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'username': opts['username'],
        'accountId': opts['accountId'],
        'sortBy': opts['sortBy'],
        'sortOrder': opts['sortOrder']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = OutputValues;
      return this.apiClient.callApi(
        '/accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAccount operation.
     * @callback module:api/AccountApi~updateAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputValues} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:model/InputValues} inputValues 
     * @param {module:api/AccountApi~updateAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputValues}
     */
    updateAccount(id, inputValues, callback) {
      let postBody = inputValues;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateAccount");
      }
      // verify the required parameter 'inputValues' is set
      if (inputValues === undefined || inputValues === null) {
        throw new Error("Missing the required parameter 'inputValues' when calling updateAccount");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = OutputValues;
      return this.apiClient.callApi(
        '/accounts/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
